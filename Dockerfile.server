# Optimized Frontend Dockerfile for server deployment
FROM node:20-alpine AS build-stage

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage with nginx
FROM nginx:alpine AS production-stage

# Copy built assets from build stage
COPY --from=build-stage /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy PWA manifest, icons, and CV (create directories first)
RUN mkdir -p /usr/share/nginx/html/icons /usr/share/nginx/html/cv

# Copy public assets - create empty directory if public doesn't exist
RUN mkdir -p /tmp/public
COPY public/ /tmp/public/
RUN if [ -f /tmp/public/manifest.json ]; then cp /tmp/public/manifest.json /usr/share/nginx/html/; fi
RUN if [ -d /tmp/public/icons ] && [ "$(ls -A /tmp/public/icons)" ]; then cp -r /tmp/public/icons/* /usr/share/nginx/html/icons/; fi
RUN if [ -d /tmp/public/cv ] && [ "$(ls -A /tmp/public/cv)" ]; then cp -r /tmp/public/cv/* /usr/share/nginx/html/cv/; fi
RUN if [ -f /tmp/public/favicon.svg ]; then cp /tmp/public/favicon.svg /usr/share/nginx/html/; fi
RUN if [ -f /tmp/public/sw.js ]; then cp /tmp/public/sw.js /usr/share/nginx/html/; fi
RUN rm -rf /tmp/public

# Create nginx user and set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Simple health check without external tools
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
